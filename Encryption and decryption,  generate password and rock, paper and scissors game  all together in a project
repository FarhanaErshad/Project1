

import random
import string
import base64
from tkinter import *
from tkinter import ttk

def encrypt_message():
    message = text_input.get("1.0", END).strip()
    key = key_input.get().strip()

    if not message or not key:
        result_output.delete(0, END)
        result_output.insert(0, "Error: Message or Key cannot be empty!")
        return

    combined_message = message + key
    encoded_bytes = base64.b64encode(combined_message.encode("utf-8"))
    encrypted_message = encoded_bytes.decode("utf-8")
    result_output.delete(0, END)
    result_output.insert(0, encrypted_message)


def decrypt_message():
    encrypted_text = text_input.get("1.0", END).strip()
    key = key_input.get().strip()

    if not encrypted_text or not key:
        result_output.delete(0, END)
        result_output.insert(0, "Error: Encrypted text or Key cannot be empty!")
        return

    try:

        decoded_bytes = base64.b64decode(encrypted_text)
        decoded_message = decoded_bytes.decode("utf-8")

        if decoded_message.endswith(key):
            original_message = decoded_message[:-len(key)]
            result_output.delete(0, END)
            result_output.insert(0, original_message)
        else:
            result_output.delete(0, END)
            result_output.insert(0, "Error: Decryption failed. Incorrect key.")
    except Exception as e:
        result_output.delete(0, END)
        result_output.insert(0, f"Error: {str(e)}")

def generate_password():
    try:
        length = int(length_input.get())
    except ValueError:
        result_display.delete(0, END)
        result_display.insert(0, "Invalid length!")
        return

    include_uppercase = uppercase_var.get()
    include_lowercase = lowercase_var.get()
    include_numbers = numbers_var.get()
    include_symbols = symbols_var.get()

    char_pool = ''
    if include_uppercase:
        char_pool += string.ascii_uppercase
    if include_lowercase:
        char_pool += string.ascii_lowercase
    if include_numbers:
        char_pool += string.digits
    if include_symbols:
        char_pool += string.punctuation

    if not char_pool:
        result_display.delete(0, END)
        result_display.insert(0, "Select at least one option!")
        return

    password = ''.join(random.choice(char_pool) for _ in range(length))

    result_display.delete(0, END)
    result_display.insert(0, password)

def play_rps(user_choice):
    options = ["rock", "paper", "scissors"]
    computer_choice = random.choice(options)
    result_text = ""

    if user_choice == computer_choice:
        result_text = "Draw!"
        rps_results["draws"] += 1
    elif (user_choice == "rock" and computer_choice == "scissors") or \
            (user_choice == "paper" and computer_choice == "rock") or \
            (user_choice == "scissors" and computer_choice == "paper"):
        result_text = "You win!"
        rps_results["user_wins"] += 1
    else:
        result_text = "Computer wins!"
        rps_results["computer_wins"] += 1

    rps_output.config(text=f"Computer chose: {computer_choice}\n{result_text}")
    rps_score.config(
        text=f"Your Wins: {rps_results['user_wins']} | Computer Wins: {rps_results['computer_wins']} | Draws: {rps_results['draws']}")

def quit_game():
    root.quit()

root = Tk()
root.geometry("600x700")
root.title("Multi-Function Tool")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

encryption_tab = Frame(notebook)
notebook.add(encryption_tab, text="Encryption")

Label(encryption_tab, text="Enter your Message:", font=("Helvetica", 12)).pack(pady=5)
text_input = Text(encryption_tab, height=5, width=50)
text_input.pack(pady=5)

Label(encryption_tab, text="Enter Encryption Key:", font=("Helvetica", 12)).pack(pady=5)
key_input = Entry(encryption_tab, show="*", width=50)
key_input.pack(pady=5)

Button(encryption_tab, text="Encrypt", command=encrypt_message, bg="lightblue", font=("Helvetica", 12)).pack(pady=10)
Button(encryption_tab, text="Decrypt", command=decrypt_message, bg="lightgreen", font=("Helvetica", 12)).pack(pady=10)

Label(encryption_tab, text="Output (Copyable):", font=("Helvetica", 12)).pack(pady=5)
result_output = Entry(encryption_tab, font=("Helvetica", 12), width=50)
result_output.pack(pady=5)

password_tab = Frame(notebook)
notebook.add(password_tab, text="Password Generator")

Label(password_tab, text="Password Length:", font=("Helvetica", 10)).pack(pady=5)
length_input = Entry(password_tab, width=10)
length_input.pack(pady=5)

uppercase_var = BooleanVar(value=True)
lowercase_var = BooleanVar(value=True)
numbers_var = BooleanVar(value=True)
symbols_var = BooleanVar(value=True)

Label(password_tab, text="Include:", font=("Helvetica", 10)).pack(pady=5)
Checkbutton(password_tab, text="Uppercase Letters", variable=uppercase_var).pack(anchor=W)
Checkbutton(password_tab, text="Lowercase Letters", variable=lowercase_var).pack(anchor=W)
Checkbutton(password_tab, text="Numbers", variable=numbers_var).pack(anchor=W)
Checkbutton(password_tab, text="Symbols", variable=symbols_var).pack(anchor=W)

Button(password_tab, text="Generate Password", command=generate_password, bg="lightblue").pack(pady=10)

Label(password_tab, text="Generated Password:", font=("Helvetica", 10)).pack(pady=5)
result_display = Entry(password_tab, font=("Helvetica", 12), fg="green", width=40)
result_display.pack(pady=5)

rps_tab = Frame(notebook)
notebook.add(rps_tab, text="Rock, Paper, Scissors")

Label(rps_tab, text="Choose Rock, Paper, or Scissors:", font=("Helvetica", 12)).pack(pady=10)

Button(rps_tab, text="Rock", command=lambda: play_rps("rock"), bg="lightblue", font=("Helvetica", 12)).pack(pady=5)
Button(rps_tab, text="Paper", command=lambda: play_rps("paper"), bg="lightgreen", font=("Helvetica", 12)).pack(pady=5)
Button(rps_tab, text="Scissors", command=lambda: play_rps("scissors"), bg="lightcoral", font=("Helvetica", 12)).pack(
    pady=5)

rps_output = Label(rps_tab, text="Choose an option to play", font=("Helvetica", 12))
rps_output.pack(pady=10)

rps_results = {"user_wins": 0, "computer_wins": 0, "draws": 0}
rps_score = Label(rps_tab, text="Your Wins: 0 | Computer Wins: 0 | Draws: 0", font=("Helvetica", 12))
rps_score.pack(pady=5)

Button(rps_tab, text="Quit", command=quit_game, bg="lightpink", font=("Helvetica", 12)).pack(pady=20)

root.mainloop()
